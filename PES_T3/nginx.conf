user  root;
worker_processes  1;

error_log  /app/logs/error.log;
error_log  /app/logs/error.log  notice;
error_log  /app/logs/error.log  info;

pid        /app/tmp/nginx.pid;
events {
    worker_connections  1024;
}

http {
    include       /nginx/conf/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /app/logs/access.log  main;

    sendfile        off;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    init_by_lua '
      package.path = "/app/src/?.lua;/app/lib/?.lua;" .. package.path
      local connection = require("mongorover.MongoClient").new("mongodb://mongolocal:27017/")
      front_controller = function() return require("front_controller"):new(ngx, connection) end
    ';
    server {
        listen       80;
        server_name  localhost;
        set $session_redis_host          redislocal;
        set $template_root /app/src/;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /public/ {
          access_log        off;
          expires           -1;
          add_header        Cache-Control no-cache;
          root   /app;
          index  index.html index.htm;
        }

        location / {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller():call{controller = "home", action = "home"}
            else
              ngx.exit(405)
            end
          ';
        }

        location ~ ^/articles\.html$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller():call{controller = "articles", action = "index"}
            else
              ngx.exit(405)
            end
          ';
        }

        location ~ ^/articles$ {
          # Pass altered request body to this location
          upload_pass   @create_upload;

          # Store files to this directory
          upload_store /app/tmp;

          upload_max_file_size 10m;
          client_max_body_size 10m;

          # Allow uploaded files to be read only by user
          upload_store_access user:rw group:rw all:rw;

          # Set specified fields in request body
          upload_set_form_field $upload_field_name.name "$upload_file_name";
          upload_set_form_field $upload_field_name.content_type "$upload_content_type";
          upload_set_form_field $upload_field_name.path "$upload_tmp_path";

          # Inform backend about hash and size of a file
          upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
          upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";

          upload_pass_form_field "^.*$";

          upload_cleanup 400 404 499 500-505;
        }

        location ~ ^/articles/(?<id>[\w]+)\.html$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller():call{controller = "articles", action = "show", path_args = {id = ngx.var.id}}
            else
              ngx.exit(405)
            end
          ';
        }
        
        location ~ ^/articles/(?<id>[\w]+)/update$ {
          # Pass altered request body to this location
          upload_pass   @update_upload;

          # Store files to this directory
          upload_store /app/tmp;
          
          upload_max_file_size 10m;
          client_max_body_size 10m;

          # Allow uploaded files to be read only by user
          upload_store_access user:rw group:rw all:rw;

          # Set specified fields in request body
          upload_set_form_field $upload_field_name.name "$upload_file_name";
          upload_set_form_field $upload_field_name.content_type "$upload_content_type";
          upload_set_form_field $upload_field_name.path "$upload_tmp_path";

          # Inform backend about hash and size of a file
          upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
          upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";

          upload_pass_form_field "^.*$";

          upload_cleanup 400 404 499 500-505;
        }
        
        location ~ ^/articles/(?<id>[\w]+)$ {
          content_by_lua '
            if ngx.var.request_method == "PUT" then 
              front_controller():call{controller = "articles", action = "destroy", path_args = {id = ngx.var.id}}
            else
              ngx.exit(405)
            end
          ';
        }
        
        location ~ ^/articles/(?<id>[\w]+).pdf$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller():call{controller = "articles", action = "download", path_args = {id = ngx.var.id}}
            else 
              ngx.exit(405)
            end
          ';
        }
        
        location @create_upload {
          content_by_lua '
            front_controller():call{controller = "articles", action = "create"}
          ';
        }
        
        location @update_upload {
          content_by_lua '
            front_controller():call{controller = "articles", action = "update", path_args = {id = ngx.var.id}}
          ';
        }




        location ~ ^/conferences\.html$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller():call{controller = "conferences", action = "index"}
            else
              ngx.exit(405)
            end
          ';
        }

        location ~ ^/conferences/(?<id>[\w]+)\.html$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller():call{controller = "conferences", action = "show", path_args = {id = ngx.var.id}}
            else
              ngx.exit(405)
            end
          ';
        }
        
        location ~ ^/conferences$ {
          content_by_lua '
            if ngx.var.request_method == "POST" then 
              front_controller():call{controller = "conferences", action = "create"}
            else
              ngx.exit(405)
            end
          ';
        }
        
        location ~ ^/conferences/(?<id>[\w]+)/update$ {
          content_by_lua '
            if ngx.var.request_method == "POST" then 
              front_controller():call{controller = "conferences", action = "update", path_args = {id = ngx.var.id}}
            else
              ngx.exit(405)
            end
          ';
        }


    }
}
